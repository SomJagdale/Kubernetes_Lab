Helm is developed in the Go programming language. Helm is a package manager for Kubernetes, and it was built using
Go to leverage its strong concurrency model, efficient memory management, and static typing, which are well-suited f
or building cloud-native tools.

Helm uses the Go templating engine for rendering Kubernetes resource files, making it a natural fit for the Kubernetes 
ecosystem, which is also largely written in Go. This choice of language allows Helm to be performant, reliable, and
maintainable, aligning well with Kubernetes' architecture and design principles.

create helm chart 
$ helm create my_chart
Go template rendering engine

dry running - post rendering helm chart by go template engine
simulate the installation of a Helm chart and provide detailed output without actually deploying anything to the Kubernetes cluster.
$ helm install mychart --dry-run --debug ./mychart

Get the rendered output for the helm to know what is final values in all the objects of k8s
helm template mychart ./mychart > final.yaml

1. Basic Helm Commands###################
helm install <release-name> <chart-path>
helm install myrelease ./mychart

If your application uses a custom values file (such as myapp_values.yaml) instead of the default values.yaml,
helm install myrelease ./mychart -f myapp_values.yaml
OR
helm install myrelease ./mychart --values myapp_values.yaml

helm uninstall <release-name>: Uninstalls a release from the Kubernetes cluster

helm list: Lists all the Helm releases in the Kubernetes cluster. By default, it shows releases in the current namespace.

helm repo add <repo-name> <repo-url>: Adds a new Helm chart repository by specifying a name and a URL.

helm repo update

helm search repo nginx

helm get all <release-name>: Fetches all the information about a deployed release, including the Kubernetes resources it has created.

helm template <chart-path>: Renders the templates in a Helm chart to plain Kubernetes YAML manifests, without installing anything. This command is useful for debugging and validating charts.

2. Helm Chart and Release Management#########################

helm show chart <chart-path>: Displays detailed information about a chart, such as the version, description, and maintainers.

helm show values <chart-path>: Displays the default values of a chart, which can be overridden during installation.

helm rollback <release-name> <revision>: Rolls back a release to a previous revision. This command can be used to undo changes made by a faulty upgrade.

3. Helm Debugging and Dry-Run ######################################

helm install <release-name> <chart-path> --dry-run --debug: Simulates an installation of a chart, providing detailed output for debugging purposes without actually deploying anything.

helm test <release-name>: Runs the tests defined in a Helm chart for a given release. This is used to validate that the release has been installed correctly and is working as expected.

helm lint <chart-path>: Examines a chart for possible issues and errors. This is useful for validating charts before deploying them.

4. Helm Packaging and Repository Management######################################

helm package <chart-path>: Packages a Helm chart into a .tgz archive that can be easily shared or uploaded to a chart repository.

Other commands in brief 
Available Commands:
  completion  generate autocompletion scripts for the specified shell
  create      create a new chart with the given name
  dependency  manage a chart's dependencies
  env         helm client environment information
  get         download extended information of a named release
  help        Help about any command
  history     fetch release history
  install     install a chart
  lint        examine a chart for possible issues
  list        list releases
  package     package a chart directory into a chart archive
  plugin      install, list, or uninstall Helm plugins
  pull        download a chart from a repository and (optionally) unpack it in local directory
  push        push a chart to remote
  registry    login to or logout from a registry
  repo        add, list, remove, update, and index chart repositories
  rollback    roll back a release to a previous revision
  search      search for a keyword in charts
  show        show information of a chart
  status      display the status of the named release
  template    locally render templates
  test        run tests for a release
  uninstall   uninstall a release
  upgrade     upgrade a release
  verify      verify that a chart at the given path has been signed and is valid
  version     print the client version information

Other importent flags and options
--kube-apiserver string
Purpose: Specifies the address and port of the Kubernetes API server.
Usage: Useful when connecting to a Kubernetes API server that is not specified in the default kubeconfig file.

--kube-as-user string
Purpose: Specifies a user to impersonate for the Helm operation.

--kube-ca-file string
Purpose: Provides the path to a certificate authority (CA) file for establishing a secure connection to the Kubernetes API server.
Usage: Ensures secure communication by validating the Kubernetes API server’s certificate.

--kube-context string
Purpose: Specifies the name of the Kubernetes context to use from the kubeconfig file.
Usage: Allows selecting a specific context (cluster, user, and namespace) to interact with, instead of using the current context.

--kube-insecure-skip-tls-verify
Purpose: If set to true, the Kubernetes API server’s certificate is not validated.
Usage: Can be used to bypass certificate validation for HTTPS connections, making the connection insecure. Typically used in development or testing environments.


--kube-tls-server-name string
Purpose: Specifies the server name for Kubernetes API server certificate validation.
Usage: Used to provide a custom server name for verifying the Kubernetes API server’s TLS certificate, which can be different from the actual hostname.

--kube-token string
Purpose: Specifies a bearer token for authentication with the Kubernetes API server.
Usage: Used for authenticating requests to the Kubernetes API server, often in automation scripts or CI/CD pipelines.

--kubeconfig string
Purpose: Specifies the path to the kubeconfig file.
Usage: Allows using a specific kubeconfig file other than the default ~/.kube/config, useful for accessing different clusters or using different credentials.

-n, --namespace string
Purpose: Specifies the Kubernetes namespace scope for the Helm request.
Usage: Sets the namespace where the Helm command should operate. If not specified, the default namespace is used.

registry-config string
Purpose: Specifies the path to the registry configuration file.
Default: "/home/somanath/.config/helm/registry/config.json".
Usage: Configures the Docker registry settings for pulling Helm chart dependencies.

--repository-config string
Purpose: Specifies the path to the file containing Helm repository names and URLs.
Default: "/home/somanath/.config/helm/repositories.yaml".
Usage: Points Helm to the file containing configured repository information, such as names and URLs for downloading charts.
